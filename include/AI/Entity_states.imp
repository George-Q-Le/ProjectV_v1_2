/*  Copyright 2017 George Le
    Definitions of functions declared in Entity_stats.h
*/
#include <iostream>
#include "AI/Entity_states.h"
#include "Support/random_messages.h"

template<class TEntityType>
void CIdleState<TEntityType>::Enter(TEntityType* p_character)
{
    // displays a message that the entity has entered this state
    std::cout << "Idle_state-Enter" << std::endl;
}

template<class TEntityType>
bool CIdleState<TEntityType>::Evaluate(TEntityType* p_character)
{
    std::cout << "Idle_state-Move" << std::endl;
    // entity performs a action that is not an Attack depending on his needs
    return p_character->Move();
}

template<class TEntityType>
void CIdleState<TEntityType>::Exit(TEntityType* p_character)
{
    // displays a message that the entity has exited this state
}

template<class TEntityType>
void CAggressiveState<TEntityType>::Enter(TEntityType* p_character)
{
    // displays a message that the entity has entered this state
}

template<class TEntityType>
bool CAggressiveState<TEntityType>::Evaluate(TEntityType* p_character)
{
    std::cout << "CAggressiveState-Attack" << std::endl;
    // entity performs an Attack
    return p_character->Attack();
}

template<class TEntityType>
void CAggressiveState<TEntityType>::Exit(TEntityType* p_character)
{
    // displays a message that the entity has exited this state
}

template<class TEntityType>
void CDefensiveState<TEntityType>::Enter(TEntityType* p_character)
{
    // displays a message that the entity has entered this state
}

template<class TEntityType>
bool CDefensiveState<TEntityType>::Evaluate(TEntityType* p_character)
{
    std::cout << "CDefensiveState-Move" << std::endl;
    // will begin to retreat and return fire
    return p_character->Move();
}

template<class TEntityType>
void CDefensiveState<TEntityType>::Exit(TEntityType* p_character)
{
    // displays a message that the entity has exited this state
}

template<class TEntityType>
void CRunState<TEntityType>::Enter(TEntityType* p_character)
{
    // displays a message that the entity has entered this state
}

template<class TEntityType>
bool CRunState<TEntityType>::Evaluate(TEntityType* p_character)
{
    std::cout << "CRunState-flee" << std::endl;
    // entity will only attempt to flee
    return p_character->Flee();
}

template<class TEntityType>
void CRunState<TEntityType>::Exit(TEntityType* p_character)
{
    // displays a message that the entity has exited this state
}

template<class TEntityType>
void CDesperateState<TEntityType>::Enter(TEntityType* p_character)
{
    // displays a message that the entity has entered this state
}

template<class TEntityType>
bool CDesperateState<TEntityType>::Evaluate(TEntityType* p_character)
{
    std::cout << "Desperate_state-Move" << std::endl;
    // will charge(gameplay-wise Move closer) at opponent and Attack them
    return p_character->Move();
}

template<class TEntityType>
void CDesperateState<TEntityType>::Exit(TEntityType* p_character)
{
    // displays a message that the entity has exited this state
}